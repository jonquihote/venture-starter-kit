<?php

namespace Venture\Home\Filament\Imports;

use Filament\Actions\Imports\ImportColumn;
use Filament\Actions\Imports\Importer;
use Filament\Actions\Imports\Models\Import;
use Illuminate\Support\Number;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;
use Venture\Home\Models\Account;
use Venture\Home\Models\Team;

class TeamImporter extends Importer
{
    protected static ?string $model = Team::class;

    public static function getColumns(): array
    {
        return [
            ImportColumn::make('name')
                ->requiredMapping()
                ->rules([
                    'required',
                    'string',
                    'max:255',
                ])
                ->castStateUsing(function (string $state): string {
                    return Str::squish($state);
                })
                ->examples(['Meta', 'Amazon', 'Apple', 'Microsoft', 'Alphabet']),

            ImportColumn::make('owner_id')
                ->requiredMapping()
                ->rules([
                    'required',
                    Rule::exists(Account::class, 'id'),
                ])
                ->examples([1, 2, 3, 4, 5]),
        ];
    }

    public function resolveRecord(): ?Team
    {
        return new Team;
    }

    protected function beforeSave(): void
    {
        // The slug will be automatically generated by the HasSlug trait
    }

    public function getValidationMessages(): array
    {
        return [
            'name.required' => 'The name field is required.',
            'name.string' => 'The name must be a string.',
            'name.max' => 'The name must not be greater than 255 characters.',
            'owner_id.required' => 'The owner field is required.',
            'owner_id.exists' => 'The selected owner does not exist.',
        ];
    }

    public static function getCompletedNotificationBody(Import $import): string
    {
        $body = 'Your team import has completed and ' . Number::format($import->successful_rows) . ' ' . str('row')->plural($import->successful_rows) . ' imported.';

        if ($failedRowsCount = $import->getFailedRowsCount()) {
            $body .= ' ' . Number::format($failedRowsCount) . ' ' . str('row')->plural($failedRowsCount) . ' failed to import.';
        }

        return $body;
    }
}
